#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Lottie JSON –≤ TGS —Ñ–æ—Ä–º–∞—Ç
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node convert-to-tgs.js input.json output.tgs
 * 
 * –ò–ª–∏ –¥–ª—è –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ:
 *   node convert-to-tgs.js
 */

const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 2) {
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
  const inputFile = args[0];
  const outputFile = args[1];
  
  convertFile(inputFile, outputFile);
} else if (args.length === 0) {
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ JSON –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
  console.log('üîç –ü–æ–∏—Å–∫ JSON —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ...\n');
  
  const files = fs.readdirSync('.').filter(file => file.endsWith('.json'));
  
  if (files.length === 0) {
    console.log('‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    process.exit(1);
  }
  
  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${files.length} JSON —Ñ–∞–π–ª(–æ–≤)\n`);
  
  files.forEach(file => {
    const outputFile = file.replace('.json', '.tgs');
    convertFile(file, outputFile);
  });
  
  console.log('\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
} else {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node convert-to-tgs.js input.json output.tgs');
  console.log('  –∏–ª–∏');
  console.log('  node convert-to-tgs.js (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ JSON –≤ –ø–∞–ø–∫–µ)');
  process.exit(1);
}

function convertFile(inputPath, outputPath) {
  try {
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const lottieJson = fs.readFileSync(inputPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
    try {
      JSON.parse(lottieJson);
    } catch (e) {
      console.log(`‚ùå ${inputPath} - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON`);
      return;
    }
    
    // –°–∂–∏–º–∞–µ–º —á–µ—Ä–µ–∑ gzip
    const compressed = zlib.gzipSync(lottieJson);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ TGS
    fs.writeFileSync(outputPath, compressed);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const originalSize = fs.statSync(inputPath).size;
    const compressedSize = fs.statSync(outputPath).size;
    const ratio = ((1 - compressedSize / originalSize) * 100).toFixed(1);
    
    console.log(`‚úÖ ${path.basename(inputPath)} ‚Üí ${path.basename(outputPath)}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${formatBytes(originalSize)} ‚Üí ${formatBytes(compressedSize)} (—Å–∂–∞—Ç–æ –Ω–∞ ${ratio}%)\n`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${inputPath}:`, error.message);
  }
}

function formatBytes(bytes) {
  if (bytes < 1024) return bytes + ' B';
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
  return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}
