#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TGS —Ñ–∞–π–ª–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node check-tgs.js file.tgs
 *   node check-tgs.js (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ .tgs –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)
 */

const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

const args = process.argv.slice(2);

if (args.length === 1) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
  checkTGS(args[0]);
} else if (args.length === 0) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ TGS –≤ –ø–∞–ø–∫–µ
  console.log('üîç –ü–æ–∏—Å–∫ TGS —Ñ–∞–π–ª–æ–≤...\n');
  
  const files = fs.readdirSync('.').filter(file => file.endsWith('.tgs'));
  
  if (files.length === 0) {
    console.log('‚ùå TGS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    process.exit(1);
  }
  
  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${files.length} TGS —Ñ–∞–π–ª(–æ–≤)\n`);
  
  files.forEach(file => {
    checkTGS(file);
    console.log('---\n');
  });
} else {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node check-tgs.js file.tgs');
  console.log('  –∏–ª–∏');
  console.log('  node check-tgs.js (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ TGS –≤ –ø–∞–ø–∫–µ)');
  process.exit(1);
}

function checkTGS(filePath) {
  try {
    console.log(`üìÑ –§–∞–π–ª: ${path.basename(filePath)}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const compressed = fs.readFileSync(filePath);
    const size = compressed.length;
    
    console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${formatBytes(size)}`);
    
    if (size > 64 * 1024) {
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 64KB (–ª–∏–º–∏—Ç Telegram)');
    }
    
    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
    const decompressed = zlib.inflateSync(compressed).toString();
    console.log(`üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(decompressed.length)}`);
    
    // –ü–∞—Ä—Å–∏–º JSON
    const data = JSON.parse(decompressed);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–∞—Ü–∏–∏
    console.log(`üé¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–∞—Ü–∏–∏:`);
    console.log(`   - FPS: ${data.fr || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`   - –®–∏—Ä–∏–Ω–∞: ${data.w || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    console.log(`   - –í—ã—Å–æ—Ç–∞: ${data.h || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    console.log(`   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${((data.op - data.ip) / data.fr).toFixed(2)}—Å`);
    console.log(`   - –°–ª–æ—ë–≤: ${data.layers?.length || 0}`);
    console.log(`   - –í–µ—Ä—Å–∏—è: ${data.v || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    
    console.log('‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π!');
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

function formatBytes(bytes) {
  if (bytes < 1024) return bytes + ' B';
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
  return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}
